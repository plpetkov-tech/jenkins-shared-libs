name: Build and Push Jenkins SLSA Security Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-security-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-security-tools.yml'
  schedule:
    # Rebuild weekly to get latest security updates
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/jenkins-slsa-tools

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Copy Dockerfile to build context
      run: |
        mkdir -p docker/
        cp /home/plamen/feelgood-api/migration/docker/jenkins-slsa-tools.Dockerfile docker/Dockerfile

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: docker/
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'spdx-json'
        output-file: 'sbom.spdx.json'

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json