# This is the pod template resource for the Jenkins shared library
# It will be loaded by the slsaSecurityPipeline using libraryResource

apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "agent"
    security-pipeline: "true"
    app.kubernetes.io/name: "jenkins-security-agent"
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: "jenkins"
spec:
  serviceAccountName: jenkins-agent
  
  # Security context for the pod
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
    seccompProfile:
      type: RuntimeDefault
  
  # Node selection and scheduling
  nodeSelector:
    kubernetes.io/arch: amd64
  
  tolerations:
  - key: "jenkins"
    operator: "Equal"
    value: "agent"
    effect: "NoSchedule"
  - key: "security-workload"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  containers:
  # Main security tools container
  - name: security-tools
    image: "ghcr.io/plpetkov-tech/jenkins-slsa-tools:latest"
    imagePullPolicy: Always
    command: ["/bin/sh", "-c", "cat"]
    tty: true
    
    env:
    # Docker configuration
    - name: DOCKER_HOST
      value: "tcp://localhost:2376"
    - name: DOCKER_TLS_VERIFY
      value: "1"
    - name: DOCKER_CERT_PATH
      value: "/certs/client"
    
    # Sigstore configuration
    - name: FULCIO_URL
      value: "https://fulcio.kubectl.shop"
    - name: REKOR_URL
      value: "https://rekor.kubectl.shop"
    - name: OIDC_ISSUER_URL
      value: "https://keycloak.kubectl.shop/realms/ci"
    - name: COSIGN_EXPERIMENTAL
      value: "1"
    
    # Pipeline configuration
    - name: REGISTRY
      value: "ghcr.io"
    - name: VULNERABILITY_THRESHOLD
      value: "MEDIUM"
    
    # Workspace configuration
    - name: JENKINS_AGENT_WORKDIR
      value: "/home/jenkins/agent"
    - name: HOME
      value: "/home/jenkins"
    
    # Tool-specific configurations
    - name: TRIVY_CACHE_DIR
      value: "/tmp/trivy-cache"
    - name: GRYPE_DB_CACHE_DIR
      value: "/tmp/grype-cache"
    
    volumeMounts:
    - name: docker-certs
      mountPath: /certs/client
      readOnly: true
    - name: workspace
      mountPath: /home/jenkins/agent
    - name: tmp-storage
      mountPath: /tmp
    - name: tool-cache
      mountPath: /home/jenkins/.cache
    
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
        ephemeral-storage: "2Gi"
      limits:
        memory: "4Gi"
        cpu: "2"
        ephemeral-storage: "10Gi"
    
    # Security context for container
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      capabilities:
        drop:
        - ALL
    
    # Liveness probe
    livenessProbe:
      exec:
        command:
        - /bin/sh
        - -c
        - "ps aux | grep -v grep | grep cat"
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
  
  # Docker-in-Docker container (privileged for container builds)
  - name: dind
    image: docker:24.0.7-dind
    imagePullPolicy: Always
    
    env:
    - name: DOCKER_TLS_CERTDIR
      value: "/certs"
    - name: DOCKER_DAEMON_ARGS
      value: "--storage-driver=overlay2 --log-level=warn --max-concurrent-downloads=3"
    - name: DOCKER_HOST
      value: "tcp://0.0.0.0:2376"
    
    # Privileged required for Docker daemon
    securityContext:
      privileged: true
    
    volumeMounts:
    - name: docker-certs
      mountPath: /certs/client
    - name: docker-storage
      mountPath: /var/lib/docker
    - name: tmp-storage
      mountPath: /tmp
    
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
        ephemeral-storage: "5Gi"
      limits:
        memory: "8Gi"
        cpu: "4"
        ephemeral-storage: "20Gi"
    
    # Readiness probe to ensure Docker daemon is ready
    readinessProbe:
      exec:
        command:
        - docker
        - info
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 6
    
    # Liveness probe
    livenessProbe:
      exec:
        command:
        - docker
        - version
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
  
  # KIND container for ephemeral Kubernetes clusters
  - name: kind
    image: "kindest/node:v1.28.0"
    imagePullPolicy: Always
    command: ["/bin/sh", "-c", "cat"]
    tty: true
    
    env:
    - name: DOCKER_HOST
      value: "tcp://localhost:2376"
    - name: DOCKER_TLS_VERIFY
      value: "1"
    - name: DOCKER_CERT_PATH
      value: "/certs/client"
    - name: KIND_EXPERIMENTAL_PROVIDER
      value: "docker"
    
    # Privileged required for KIND cluster creation
    securityContext:
      privileged: true
    
    volumeMounts:
    - name: docker-certs
      mountPath: /certs/client
      readOnly: true
    - name: kind-storage
      mountPath: /tmp
    - name: kind-config
      mountPath: /kind
    
    resources:
      requests:
        memory: "2Gi"
        cpu: "1"
        ephemeral-storage: "2Gi"
      limits:
        memory: "8Gi"
        cpu: "4"
        ephemeral-storage: "15Gi"
    
    # Liveness probe
    livenessProbe:
      exec:
        command:
        - /bin/sh
        - -c
        - "ps aux | grep -v grep | grep cat"
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
  
  # Init container to setup Docker certificates
  initContainers:
  - name: docker-certs-setup
    image: docker:24.0.7
    command: ["/bin/sh"]
    args:
    - -c
    - |
      # Wait for Docker daemon to generate certificates
      echo "Waiting for Docker TLS certificates..."
      TIMEOUT=120
      ELAPSED=0
      while [ ! -f /certs/client/cert.pem ]; do
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Timeout waiting for Docker certificates"
          exit 1
        fi
        echo "Waiting for Docker TLS certificates... (${ELAPSED}s/${TIMEOUT}s)"
        sleep 2
        ELAPSED=$((ELAPSED + 2))
      done
      echo "Docker TLS certificates ready"
      ls -la /certs/client/
    volumeMounts:
    - name: docker-certs
      mountPath: /certs/client
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
  
  volumes:
  # Shared Docker TLS certificates
  - name: docker-certs
    emptyDir:
      sizeLimit: "100Mi"
  
  # Docker daemon storage
  - name: docker-storage
    emptyDir:
      sizeLimit: "20Gi"
  
  # KIND cluster storage
  - name: kind-storage
    emptyDir:
      sizeLimit: "10Gi"
  
  # Jenkins workspace
  - name: workspace
    emptyDir:
      sizeLimit: "5Gi"
  
  # Temporary storage
  - name: tmp-storage
    emptyDir:
      sizeLimit: "2Gi"
  
  # Tool cache storage
  - name: tool-cache
    emptyDir:
      sizeLimit: "1Gi"
  
  # KIND configuration
  - name: kind-config
    configMap:
      name: kind-cluster-config
      optional: true
  
  # Resource constraints and timeouts
  restartPolicy: Never
  activeDeadlineSeconds: 7200  # 2 hours max for security pipeline
  terminationGracePeriodSeconds: 30
  
  # DNS configuration for internal services
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
    - name: ndots
      value: "2"
    - name: edns0
